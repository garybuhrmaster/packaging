#!/bin/bash

#
# Support mock config specification
#
MOCKOPTS=""
REPO="https://github.com/MythTV/mythtv.git"
while :; do
    case $1 in
        -r|--root)       # Takes an option argument; ensure it has been specified.
            if [ ! -z "$2" ]; then
                MOCKOPTS="$MOCKOPTS --root=$2"
                shift
            else
                printf 'ERROR: "--root" requires a non-empty option argument.\n'
                exit 1
            fi
            ;;
        --root=*)        # directly specified long argument
            MOCKOPTS="$MOCKOPTS $1"
            ;;
        --with)
            if [ ! -z "$2" ]; then
                MOCKOPTS="$MOCKOPTS --with=$2"
                shift
            else
                printf 'ERROR: "--with" requires a non-empty option argument.\n'
                exit 1
            fi
            ;;
        --with=*)
            MOCKOPTS="$MOCKOPTS $1"
            ;;
        --without)
            if [ ! -z "$2" ]; then
                MOCKOPTS="$MOCKOPTS --without=$2"
                shift
            else
                printf 'ERROR: "--without" requires a non-empty option argument.\n'
                exit 1
            fi
            ;;
        --without=*)
            MOCKOPTS="$MOCKOPTS $1"
            ;;
        --repo)
            if [ ! -z "$2" ]; then
                REPO="$2"
                shift
            else
                printf 'ERROR: "--repo" requires a non-empty option argument.\n'
                exit 1
            fi
            ;;
        --repo=*)
            REPO="${1#*=}"
            ;;
        --)              # End of all options.
            shift
            break
            ;;
        -?*)
            printf 'WARN: Unknown option (ignored): %s\n' "$1" >&2
            ;;
        *)               # Default case: No more options, so break out of the loop.
            break
     esac
     shift
done

GITCOMMITISH=$1

if [ "$GITCOMMITISH" == "" ]; then
    GITCOMMITISH="master"
fi


#
# First, we clone the repo, in order to obtain the
# description and commit hash for the specified
# version to build for/to (yes, this is sort of
# ugly, but while we can use ls-remote to get the
# commit hash, there is no (known) way to get the
# describe (maybe some future github api?))
#
TMPCLONEDIR=`mktemp -d`
pushd $TMPCLONEDIR >/dev/null
git clone $REPO mythtv
pushd mythtv >/dev/null
git checkout $GITCOMMITISH
if [ $? -ne 0 ]; then
    echo "Unable to checkout $GITCOMMITISH in $TMPCLONEDIR/mythtv"
    exit 1
fi

GITDESCRIBE=`git describe`
GITCOMMIT=`git rev-parse HEAD`

popd >/dev/null
popd >/dev/null

# MythTV project specific tag format
if ! [ ${GITDESCRIBE:0:1} == 'v' ]; then
    echo "Unable to parse mythtv git describe $GITDESCRIBE from $TMPCLONEDIR/mythtv"
    exit 1
fi

# Adjust git-describe to acceptable RPM format
RPMVERSION=${GITDESCRIBE:1}
RPMVERSION=${RPMVERSION//-/.}


#
# Announce to world and dog what we are doing
#
echo "----"
echo "Building mythtv version $RPMVERSION at commit $GITCOMMIT"
echo "----"

#
# Build an expanded SPEC file with our definitions so that
# the src.rpm will be reproducably buildable outside of this
# build script
#
TMPSDIR=`mktemp -d`
cp -r SOURCES $TMPSDIR/
cp -r SPECS $TMPSDIR/
sed -i -e "s/^Version: .*/Version:        $RPMVERSION/" $TMPSDIR/SPECS/mythtv.spec
sed -i -e "s/^%global commit .*/%global commit $GITCOMMIT/" $TMPSDIR/SPECS/mythtv.spec
sed -i -e "s/^Version: .*/Version:        $RPMVERSION/" $TMPSDIR/SPECS/mythtv-plugins.spec
sed -i -e "s/^%global commit .*/%global commit $GITCOMMIT/" $TMPSDIR/SPECS/mythtv-plugins.spec


# Use git-archive to create source tarball from our clone
pushd $TMPCLONEDIR/mythtv > /dev/null
git archive --output $TMPSDIR/SOURCES/mythtv-$GITCOMMIT.tar.gz --prefix mythtv-$GITCOMMIT/ $GITCOMMIT
popd >/dev/null

# Cleanup our clone
rm -rf $TMPCLONEDIR/mythtv
rmdir $TMPCLONEDIR


#
# create src.rpm resultdir
#
TMPSRCRPMDIR=`mktemp -d`

#
# Build buildable src.rpms
#
mock $MOCKOPTS --no-bootstrap-chroot --isolation simple --define="dist %{nil}" --spec=$TMPSDIR/SPECS/mythtv.spec --sources=$TMPSDIR/SOURCES --resultdir=$TMPSRCRPMDIR --buildsrpm
if [ $? -ne 0 ]; then
    echo "Unable to build source rpm"
    exit 1
fi

SRCBASERPM=`ls $TMPSRCRPMDIR/mythtv-*$RPMVERSION*.src.rpm`
if [ ! -f "$SRCBASERPM" ]; then
    echo "Source RPM for mythtv was not built"
    exit 1
fi

mock $MOCKOPTS --no-bootstrap-chroot --isolation simple --define="dist %{nil}" --spec=$TMPSDIR/SPECS/mythtv-plugins.spec --sources=$TMPSDIR/SOURCES --resultdir=$TMPSRCRPMDIR --buildsrpm
if [ $? -ne 0 ]; then
    echo "Unable to build source rpm"
    exit 1
fi

SRCPLUGINSRPM=`ls $TMPSRCRPMDIR/mythtv-plugins-*$RPMVERSION*.src.rpm`
if [ ! -f "$SRCPLUGINSRPM" ]; then
    echo "Source RPM for mythtv-plugins was not built"
    exit 1
fi


#
# Create rpm localrepo dir
#
TMPLOCALREPODIR=`mktemp -p /var/tmp -d`

#
# Build the mythtv rpms
#
mock $MOCKOPTS --no-bootstrap-chroot --isolation simple --chain --localrepo=$TMPLOCALREPODIR $SRCBASERPM $SRCPLUGINSRPM
if [ $? -ne 0 ]; then
    echo "Unable to build mythtv rpms"
    exit 1
fi


#
# Obtain/copy rpms
#
REPORPMS=`find $TMPLOCALREPODIR/ -name \*.rpm -print`

mkdir -p SRPMS RPMS
for fn in ${REPORPMS}
do
    [[ "$fn" =~ ^.*\.(.+)\.rpm$ ]] &&
        (
            archdir="${BASH_REMATCH[1]}"
            if [ "$archdir" == "src" ]; then
                cp $fn SRPMS/
            else
                if [ "$archdir" == "i686" ]; then
                    archdir="i386"
                elif [ "$archdir" == "armv7hl" ]; then
                    archdir="armhfp"
                fi
                mkdir -p RPMS/$archdir
                cp $fn RPMS/$archdir/
            fi
        )
done


#
# Cleanup
#
rm -f $TMPSRCRPMDIR/*.log
rm -f $TMPSRCRPMDIR/*.rpm
rmdir $TMPSRCRPMDIR
rm -rf $TMPLOCALREPODIR/results
rmdir $TMPLOCALREPODIR
rm -rf $TMPSDIR/SPECS
rm -rf $TMPSDIR/SOURCES
rmdir $TMPSDIR
