#!/bin/bash

MOCKCFGROOT='/etc/mock'

VERSION=$1

if [ "$VERSION" == "" ]; then
    echo "HDHRDVR VERSION must be provided as argument."
    exit 1
fi

# Use spectool to get sources if needed and available
if [ ! -f "SOURCES/hdhomerun_record_linux_$VERSION" -a -x /usr/bin/spectool ]; then
  /usr/bin/spectool -d "HDHRDVR_VERSION $VERSION" -g -s 0 -C SOURCES SPECS/hdhomerun-record.spec
fi

if [ ! -f "SOURCES/hdhomerun_record_linux_$VERSION" ]; then
    echo "SOURCES/hdhomerun_record_linux_$VERSION binary not found."
    exit 1
fi

HOSTARCH=`arch`
if [ "$HOSTARCH" == "armv7l" ]; then
    HOSTARCH="armhfp"
fi

TARGETRPMARCH=("i686" "x86_64" "armhfp" "aarch64")

EL=(`find $MOCKCFGROOT -maxdepth 1 -regextype 'grep' -regex "^$MOCKCFGROOT/centos-\(stream-\)\?[[:digit:]]\\+-$HOSTARCH.cfg$" -printf "%f\n" | sed -n "s/centos-\(stream-\)\?\([0-9]\+\)-$HOSTARCH.cfg/\2/p" | sort -n | uniq`)
ELBASE=${EL[0]}
FC=(`find $MOCKCFGROOT -maxdepth 1 -regextype 'grep' -regex "^$MOCKCFGROOT/fedora-[[:digit:]]\\+-$HOSTARCH.cfg$" -printf "%f\n" | sed -n "s/fedora-\([0-9]\+\)-$HOSTARCH.cfg/\1/p" | sort -n | uniq`)
LEAP=(`find $MOCKCFGROOT -maxdepth 1 -regextype 'grep' -regex "^$MOCKCFGROOT/opensuse-leap-[[:digit:]\\+\\.[:digit:]]\\+-$HOSTARCH.cfg$" -printf "%f\n" | sed -n "s/opensuse-leap-\([0-9]\+\\.[0-9]\+\)-$HOSTARCH.cfg/\1/p" | sort -n | uniq`)
TUMBLEWEED=(`find $MOCKCFGROOT -maxdepth 1 -regextype 'grep' -regex "^$MOCKCFGROOT/opensuse-tumbleweed-$HOSTARCH.cfg$" -printf "%f\n" | sed -n "s/opensuse-\(tumbleweed\)-$HOSTARCH.cfg/\1/p" | sort -n | uniq`)
MAGEIA=(`find $MOCKCFGROOT -maxdepth 1 -regextype 'grep' -regex "^$MOCKCFGROOT/mageia-[[:digit:]]\\+-$HOSTARCH.cfg$" -printf "%f\n" | sed -n "s/mageia-\([0-9]\+\)-$HOSTARCH.cfg/\1/p" | sort -n | uniq`)

# Create resultdir directories
for el in ${EL[@]}
do
    for arch in ${TARGETRPMARCH[@]}
    do
        if [ $el -gt 7 ] && [ "$arch" == "i686" ]; then
            continue
        fi
        if [ $el -gt 8 ] && [ "$arch" == "armhfp" ]; then
            continue
        fi
        if [ "$arch" == "i686" ]; then
            arch="i386"
        fi
        mkdir -p RPMS/el/$el/$arch
    done
done
for fc in ${FC[@]}
do
    for arch in ${TARGETRPMARCH[@]}
    do
        if [ $fc -gt 30 ] && [ "$arch" == "i686" ]; then
            continue
        fi
        if [ "$arch" == "i686" ]; then
            arch="i386"
        fi
        mkdir -p RPMS/fedora/$fc/$arch
    done
done
for leap in ${LEAP[@]}
do
    for arch in ${TARGETRPMARCH[@]}
    do
        if [ "$arch" == "armhfp" ]; then
            continue
        fi
        if [ "$arch" == "i686" ]; then
            continue
        fi
        mkdir -p RPMS/leap/$leap/$arch
    done
done
for tumbleweed in ${TUMBLEWEED[@]}
do
    for arch in ${TARGETRPMARCH[@]}
    do
        if [ "$arch" == "armhfp" ]; then
            arch="armv7hl"
        fi
        if [ "$arch" == "i686" ]; then
            arch="i586"
        fi
        mkdir -p RPMS/tumbleweed/$arch
    done
done
for mageia in ${MAGEIA[@]}
do
    for arch in ${TARGETRPMARCH[@]}
    do
        if [ "$arch" == "armhfp" ]; then
            continue
        fi
        if [ "$arch" == "aarch64" ]; then
            continue
        fi
        if [ "$arch" == "i686" ]; then
            arch="i586"
        fi
        mkdir -p RPMS/mageia/$mageia/$arch
    done
done

# Build src.rpm using oldest available EL
SRCDIR=`mktemp -d`
MOCKCFG="$MOCKCFGROOT/centos-$ELBASE-$HOSTARCH.cfg"
if [ -e "$MOCKCFGROOT/centos-stream-$ELBASE-$HOSTARCH.cfg" ]; then
    MOCKCFG="$MOCKCFGROOT/centos-stream-$ELBASE-$HOSTARCH.cfg"
fi
/usr/bin/mock --root $MOCKCFG --define "HDHRDVR_VERSION $VERSION" --define "dist %{nil}" --buildsrpm --spec=SPECS/hdhomerun-record.spec --sources=SOURCES --resultdir=$SRCDIR --disable-plugin=ccache
if [ ! $? -eq 0 ]; then
    echo ""
    echo "***********************************************************"
    echo "******** Build failed, logs in $SRCDIR ********"
    echo "***********************************************************"
    echo ""
    exit 1
fi
SRCRPM=`ls $SRCDIR/*$VERSION*.src.rpm`
if [ ! -f "$SRCRPM" ]; then
    echo "Source RPM was not built"
    exit 1
fi

BUILDFAILURE=0

# Build arch specific rpms
for fc in ${FC[@]}
do
    for arch in ${TARGETRPMARCH[@]}
    do
        if [ $fc -gt 30 ] && [ "$arch" == "i686" ]; then
            continue
        fi
        rpmresultarch=$arch
        rpmtargetarch=$arch
        if [ "$arch" == "i686" ]; then
            rpmresultarch="i386"
        fi
        if [ "$arch" == "armhfp" ]; then
            rpmtargetarch="armv7hl"
        fi
        RESULTDIR=`mktemp -d`
        /usr/bin/mock --root $MOCKCFGROOT/fedora-$fc-$HOSTARCH.cfg --define "HDHRDVR_VERSION $VERSION" --target=$rpmtargetarch --define "dist .fc$fc" --resultdir=$RESULTDIR --disable-plugin=ccache $SRCRPM
        if [ ! $? -eq 0 ]; then
            echo ""
            echo "***********************************************************"
            echo "******** Build failed, logs in $RESULTDIR ********"
            echo "***********************************************************"
            echo ""
            BUILDFAILURE=1
            #exit 1
        else
            cp $RESULTDIR/*.$rpmtargetarch.rpm RPMS/fedora/$fc/$rpmresultarch/
            rm -f $RESULTDIR/*.log
            rm -f $RESULTDIR/*.rpm
            rmdir $RESULTDIR
        fi
    done
done

for el in ${EL[@]}
do
    MOCKCFG="$MOCKCFGROOT/centos-$el-$HOSTARCH.cfg"
    if [ -e "$MOCKCFGROOT/centos-stream-$el-$HOSTARCH.cfg" ]; then
        MOCKCFG="$MOCKCFGROOT/centos-stream-$el-$HOSTARCH.cfg"
    fi
    for arch in ${TARGETRPMARCH[@]}
    do
        if [ $el -gt 7 ] && [ "$arch" == "i686" ]; then
            continue
        fi
        if [ $el -gt 8 ] && [ "$arch" == "armhfp" ]; then
            continue
        fi
        rpmresultarch=$arch
        rpmtargetarch=$arch
        if [ "$arch" == "i686" ]; then
            rpmresultarch="i386"
        fi
        if [ "$arch" == "armhfp" ]; then
            rpmtargetarch="armv7hl"
        fi
        RESULTDIR=`mktemp -d`
        /usr/bin/mock --root $MOCKCFG --define "HDHRDVR_VERSION $VERSION" --target=$rpmtargetarch --define "dist .el$el" --resultdir=$RESULTDIR --disable-plugin=ccache $SRCRPM
        if [ ! $? -eq 0 ]; then
            echo ""
            echo "***********************************************************"
            echo "******** Build failed, logs in $RESULTDIR ********"
            echo "***********************************************************"
            echo ""
            BUILDFAILURE=1
            #exit 1
        else
            cp $RESULTDIR/*.$rpmtargetarch.rpm RPMS/el/$el/$rpmresultarch/
            rm -f $RESULTDIR/*.log
            rm -f $RESULTDIR/*.rpm
            rmdir $RESULTDIR
        fi
    done
done

for leap in ${LEAP[@]}
do
    for arch in ${TARGETRPMARCH[@]}
    do
        if [ "$arch" == "armhfp" ]; then
            continue
        fi
        if [ "$arch" == "i686" ]; then
            continue
        fi
        rpmresultarch=$arch
        rpmtargetarch=$arch
        RESULTDIR=`mktemp -d`
        /usr/bin/mock --root $MOCKCFGROOT/opensuse-leap-$leap-$HOSTARCH.cfg --define "HDHRDVR_VERSION $VERSION" --target=$rpmtargetarch --resultdir=$RESULTDIR --disable-plugin=ccache $SRCRPM
        if [ ! $? -eq 0 ]; then
            echo ""
            echo "***********************************************************"
            echo "******** Build failed, logs in $RESULTDIR ********"
            echo "***********************************************************"
            echo ""
            BUILDFAILURE=1
            #exit 1
        else
            cp $RESULTDIR/*.$rpmtargetarch.rpm RPMS/leap/$leap/$rpmresultarch/
            rm -f $RESULTDIR/*.log
            rm -f $RESULTDIR/*.rpm
            rmdir $RESULTDIR
        fi
    done
done

for tumbleweed in ${TUMBLEWEED[@]}
do
    for arch in ${TARGETRPMARCH[@]}
    do
        rpmresultarch=$arch
        rpmtargetarch=$arch
        if [ "$arch" == "i686" ]; then
            rpmtargetarch="i586"
            rpmresultarch="i586"
        fi
        if [ "$arch" == "armhfp" ]; then
            rpmresultarch="armv7hl"
            rpmtargetarch="armv7hl"
        fi
        RESULTDIR=`mktemp -d`
        /usr/bin/mock --root $MOCKCFGROOT/opensuse-tumbleweed-$HOSTARCH.cfg --define "HDHRDVR_VERSION $VERSION" --target=$rpmtargetarch --resultdir=$RESULTDIR --disable-plugin=ccache $SRCRPM
        if [ ! $? -eq 0 ]; then
            echo ""
            echo "***********************************************************"
            echo "******** Build failed, logs in $RESULTDIR ********"
            echo "***********************************************************"
            echo ""
            BUILDFAILURE=1
            #exit 1
        else
            cp $RESULTDIR/*.$rpmtargetarch.rpm RPMS/tumbleweed/$rpmresultarch/
            rm -f $RESULTDIR/*.log
            rm -f $RESULTDIR/*.rpm
            rmdir $RESULTDIR
        fi
    done
done

for mageia in ${MAGEIA[@]}
do
    for arch in ${TARGETRPMARCH[@]}
    do
        if [ "$arch" == "aarch64" ]; then
            continue
        fi
        if [ "$arch" == "armhfp" ]; then
            continue
        fi
        rpmresultarch=$arch
        rpmtargetarch=$arch
        if [ "$arch" == "i686" ]; then
            rpmtargetarch="i586"
            rpmresultarch="i586"
        fi
        RESULTDIR=`mktemp -d`
        /usr/bin/mock --root $MOCKCFGROOT/mageia-$mageia-$HOSTARCH.cfg --define "HDHRDVR_VERSION $VERSION" --target=$rpmtargetarch --resultdir=$RESULTDIR --disable-plugin=ccache $SRCRPM
        if [ ! $? -eq 0 ]; then
            echo ""
            echo "***********************************************************"
            echo "******** Build failed, logs in $RESULTDIR ********"
            echo "***********************************************************"
            echo ""
            BUILDFAILURE=1
            #exit 1
        else
            cp $RESULTDIR/*.$rpmtargetarch.rpm RPMS/mageia/$mageia/$rpmresultarch/
            rm -f $RESULTDIR/*.log
            rm -f $RESULTDIR/*.rpm
            rmdir $RESULTDIR
        fi
    done
done

# Clean up after ourselves
rm -f $SRCDIR/*.log
rm -f $SRCDIR/*.rpm
rmdir $SRCDIR

if [ $BUILDFAILURE -eq 1 ]; then
    echo ""
    echo "***********************************************************"
    echo "********** One or more builds failed, check logs **********"
    echo "***********************************************************"
    echo ""
    exit 1
fi
